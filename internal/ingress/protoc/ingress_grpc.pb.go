// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigWatcherClient is the client API for ConfigWatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigWatcherClient interface {
	// Sends a greeting
	//rpc WatchConfigurations (WatchRequest) returns (stream Configurations) {}
	WatchConfigurations(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (ConfigWatcher_WatchConfigurationsClient, error)
	GetConfigurations(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (*Configurations, error)
}

type configWatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigWatcherClient(cc grpc.ClientConnInterface) ConfigWatcherClient {
	return &configWatcherClient{cc}
}

func (c *configWatcherClient) WatchConfigurations(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (ConfigWatcher_WatchConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigWatcher_ServiceDesc.Streams[0], "/ingressv1.ConfigWatcher/WatchConfigurations", opts...)
	if err != nil {
		return nil, err
	}
	x := &configWatcherWatchConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigWatcher_WatchConfigurationsClient interface {
	Recv() (*Configurations, error)
	grpc.ClientStream
}

type configWatcherWatchConfigurationsClient struct {
	grpc.ClientStream
}

func (x *configWatcherWatchConfigurationsClient) Recv() (*Configurations, error) {
	m := new(Configurations)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configWatcherClient) GetConfigurations(ctx context.Context, in *WatchReq, opts ...grpc.CallOption) (*Configurations, error) {
	out := new(Configurations)
	err := c.cc.Invoke(ctx, "/ingressv1.ConfigWatcher/GetConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigWatcherServer is the server API for ConfigWatcher service.
// All implementations must embed UnimplementedConfigWatcherServer
// for forward compatibility
type ConfigWatcherServer interface {
	// Sends a greeting
	//rpc WatchConfigurations (WatchRequest) returns (stream Configurations) {}
	WatchConfigurations(*WatchReq, ConfigWatcher_WatchConfigurationsServer) error
	GetConfigurations(context.Context, *WatchReq) (*Configurations, error)
	mustEmbedUnimplementedConfigWatcherServer()
}

// UnimplementedConfigWatcherServer must be embedded to have forward compatible implementations.
type UnimplementedConfigWatcherServer struct {
}

func (UnimplementedConfigWatcherServer) WatchConfigurations(*WatchReq, ConfigWatcher_WatchConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConfigurations not implemented")
}
func (UnimplementedConfigWatcherServer) GetConfigurations(context.Context, *WatchReq) (*Configurations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}
func (UnimplementedConfigWatcherServer) mustEmbedUnimplementedConfigWatcherServer() {}

// UnsafeConfigWatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigWatcherServer will
// result in compilation errors.
type UnsafeConfigWatcherServer interface {
	mustEmbedUnimplementedConfigWatcherServer()
}

func RegisterConfigWatcherServer(s grpc.ServiceRegistrar, srv ConfigWatcherServer) {
	s.RegisterService(&ConfigWatcher_ServiceDesc, srv)
}

func _ConfigWatcher_WatchConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigWatcherServer).WatchConfigurations(m, &configWatcherWatchConfigurationsServer{stream})
}

type ConfigWatcher_WatchConfigurationsServer interface {
	Send(*Configurations) error
	grpc.ServerStream
}

type configWatcherWatchConfigurationsServer struct {
	grpc.ServerStream
}

func (x *configWatcherWatchConfigurationsServer) Send(m *Configurations) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigWatcher_GetConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigWatcherServer).GetConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingressv1.ConfigWatcher/GetConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigWatcherServer).GetConfigurations(ctx, req.(*WatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigWatcher_ServiceDesc is the grpc.ServiceDesc for ConfigWatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigWatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingressv1.ConfigWatcher",
	HandlerType: (*ConfigWatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigurations",
			Handler:    _ConfigWatcher_GetConfigurations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConfigurations",
			Handler:       _ConfigWatcher_WatchConfigurations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ingress.proto",
}
