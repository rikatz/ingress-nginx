// Copyright 2022 The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ingressv1;

option go_package = "k8s.io/ingress-nginx/pkg/apis/ingress";

// Ingress Configuration Service.
service Configuration {
  // WatchConfigurations watches for full configurations
  // TODO: We can turn this into a bi-directional stream so backends provides events in realtime instead of
  // creating a new service just to post events (we should check what suits best for performance)
  rpc WatchConfigurations (BackendName) returns (stream Configurations) {}
  // GetConfigurations will be used for initial sync and periodic syncs
  rpc GetConfigurations(BackendName) returns (Configurations) {}
}

// EventService is responsible for receiving events from Backends and turning into k8s events
service EventService {
  // TODO: replace EventReturn by none.proto
  rpc PublishEvent(stream EventMessage) returns (EventReturn) {}
}

// The request message containing the node name.
message BackendName {
  // name of the backend that posted the message
  string name = 1;
  // namespace of the backend that posted the message
  string namespace = 2;
}

message EventMessage {
  BackendName backend = 1;
  string eventtype = 2;
  string reason = 3;
  string message = 4;
}

message EventReturn {
  bool ok = 1;
}

// The response message containing the greetings
message Configurations {
  // FullConfiguration messages are used for actions that triggers full resync
  message FullConfiguration {
    bytes configuration = 1;
  }

  // DynamicConfiguration actions are used only for endpoints/certificates changes
  message DynamicConfiguration {
    bytes configuration = 1;
  }


  // BackendConfiguration is used when the Ingress ConfigMap is changed
  message BackendConfiguration {
    bytes configuration = 1;
  }

  // StreamConfiguration are the TCP and UDP streams (non L7)
  message StreamConfiguration {
    bytes configuration = 1;
  }


  // TODO: Watch extra configmaps? Or add those aas a Get for templates. Or populate via store sync
  // TODO2: Certiificates should have a different service?


  oneof op{
    FullConfiguration fullconfig_op=2;
    DynamicConfiguration dynamicconfig_op=3;
    BackendConfiguration backendconfig_op=4;
    StreamConfiguration streamconfig_op=5;

  }

}