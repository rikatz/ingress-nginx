// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ingress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationClient interface {
	// WatchConfigurations watches for full configurations
	// TODO: We can turn this into a bi-directional stream so backends provides events in realtime instead of
	// creating a new service just to post events (we should check what suits best for performance)
	WatchConfigurations(ctx context.Context, in *BackendName, opts ...grpc.CallOption) (Configuration_WatchConfigurationsClient, error)
	// GetConfigurations will be used for initial sync and periodic syncs
	GetConfigurations(ctx context.Context, in *BackendName, opts ...grpc.CallOption) (*Configurations, error)
}

type configurationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationClient(cc grpc.ClientConnInterface) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) WatchConfigurations(ctx context.Context, in *BackendName, opts ...grpc.CallOption) (Configuration_WatchConfigurationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Configuration_ServiceDesc.Streams[0], "/ingressv1.Configuration/WatchConfigurations", opts...)
	if err != nil {
		return nil, err
	}
	x := &configurationWatchConfigurationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Configuration_WatchConfigurationsClient interface {
	Recv() (*Configurations, error)
	grpc.ClientStream
}

type configurationWatchConfigurationsClient struct {
	grpc.ClientStream
}

func (x *configurationWatchConfigurationsClient) Recv() (*Configurations, error) {
	m := new(Configurations)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configurationClient) GetConfigurations(ctx context.Context, in *BackendName, opts ...grpc.CallOption) (*Configurations, error) {
	out := new(Configurations)
	err := c.cc.Invoke(ctx, "/ingressv1.Configuration/GetConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
// All implementations must embed UnimplementedConfigurationServer
// for forward compatibility
type ConfigurationServer interface {
	// WatchConfigurations watches for full configurations
	// TODO: We can turn this into a bi-directional stream so backends provides events in realtime instead of
	// creating a new service just to post events (we should check what suits best for performance)
	WatchConfigurations(*BackendName, Configuration_WatchConfigurationsServer) error
	// GetConfigurations will be used for initial sync and periodic syncs
	GetConfigurations(context.Context, *BackendName) (*Configurations, error)
	mustEmbedUnimplementedConfigurationServer()
}

// UnimplementedConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationServer struct {
}

func (UnimplementedConfigurationServer) WatchConfigurations(*BackendName, Configuration_WatchConfigurationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConfigurations not implemented")
}
func (UnimplementedConfigurationServer) GetConfigurations(context.Context, *BackendName) (*Configurations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurations not implemented")
}
func (UnimplementedConfigurationServer) mustEmbedUnimplementedConfigurationServer() {}

// UnsafeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServer will
// result in compilation errors.
type UnsafeConfigurationServer interface {
	mustEmbedUnimplementedConfigurationServer()
}

func RegisterConfigurationServer(s grpc.ServiceRegistrar, srv ConfigurationServer) {
	s.RegisterService(&Configuration_ServiceDesc, srv)
}

func _Configuration_WatchConfigurations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackendName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigurationServer).WatchConfigurations(m, &configurationWatchConfigurationsServer{stream})
}

type Configuration_WatchConfigurationsServer interface {
	Send(*Configurations) error
	grpc.ServerStream
}

type configurationWatchConfigurationsServer struct {
	grpc.ServerStream
}

func (x *configurationWatchConfigurationsServer) Send(m *Configurations) error {
	return x.ServerStream.SendMsg(m)
}

func _Configuration_GetConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).GetConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingressv1.Configuration/GetConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).GetConfigurations(ctx, req.(*BackendName))
	}
	return interceptor(ctx, in, info, handler)
}

// Configuration_ServiceDesc is the grpc.ServiceDesc for Configuration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configuration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingressv1.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigurations",
			Handler:    _Configuration_GetConfigurations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConfigurations",
			Handler:       _Configuration_WatchConfigurations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apis/ingress/ingress.proto",
}

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	// TODO: replace EventReturn by none.proto
	PublishEvent(ctx context.Context, opts ...grpc.CallOption) (EventService_PublishEventClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) PublishEvent(ctx context.Context, opts ...grpc.CallOption) (EventService_PublishEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], "/ingressv1.EventService/PublishEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServicePublishEventClient{stream}
	return x, nil
}

type EventService_PublishEventClient interface {
	Send(*EventMessage) error
	CloseAndRecv() (*EventReturn, error)
	grpc.ClientStream
}

type eventServicePublishEventClient struct {
	grpc.ClientStream
}

func (x *eventServicePublishEventClient) Send(m *EventMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventServicePublishEventClient) CloseAndRecv() (*EventReturn, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EventReturn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	// TODO: replace EventReturn by none.proto
	PublishEvent(EventService_PublishEventServer) error
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) PublishEvent(EventService_PublishEventServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_PublishEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventServiceServer).PublishEvent(&eventServicePublishEventServer{stream})
}

type EventService_PublishEventServer interface {
	SendAndClose(*EventReturn) error
	Recv() (*EventMessage, error)
	grpc.ServerStream
}

type eventServicePublishEventServer struct {
	grpc.ServerStream
}

func (x *eventServicePublishEventServer) SendAndClose(m *EventReturn) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventServicePublishEventServer) Recv() (*EventMessage, error) {
	m := new(EventMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingressv1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishEvent",
			Handler:       _EventService_PublishEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/apis/ingress/ingress.proto",
}
